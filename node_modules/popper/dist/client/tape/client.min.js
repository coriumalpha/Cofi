(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _debounce = require('utilise/debounce');

var _debounce2 = _interopRequireDefault(_debounce);

var _escape = require('utilise/escape');

var _escape2 = _interopRequireDefault(_escape);

var _noop = require('utilise/noop');

var _noop2 = _interopRequireDefault(_noop);

var _raw = require('utilise/raw');

var _raw2 = _interopRequireDefault(_raw);

var _to = require('utilise/to');

var _to2 = _interopRequireDefault(_to);

var _rijs = require('rijs.core');

var _rijs2 = _interopRequireDefault(_rijs);

var _rijs3 = require('rijs.data');

var _rijs4 = _interopRequireDefault(_rijs3);

var _rijs5 = require('rijs.sync');

var _rijs6 = _interopRequireDefault(_rijs5);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var ripple = (0, _rijs6.default)((0, _rijs4.default)((0, _rijs2.default)())),
    con = window.console,
    log = con ? Function.prototype.bind.call(con.log, con) : _noop2.default;

var html = '',
    running = true,
    failures = 0,
    passes = 0,
    tests = 0,
    name = 'All Tests',
    output = (0, _raw2.default)('pre');

// reload on force reload
ripple.io.on('reload', reload);

// after first connect, reload on reconnect
ripple.io.on('connect', function (d) {
  return ripple.io.on('connect', reload);
});

// send tests-starting signal
ripple('results', {
  stats: { running: running },
  suites: [],
  html: 'Test in progress..'
});

// proxy errors back to terminal
window.onerror = function (message, url, linenumber) {
  return ripple.io.emit('global err', message, url, linenumber);
}

// proxy console logs back to terminal
;['log', 'info', 'warn', 'error', 'debug'].map(function (m) {
  if (!con || !con[m]) return; // ie
  var sup = Function.prototype.bind.call(con[m], con);
  window.console[m] = function () {
    var args = _to2.default.arr(arguments);
    ripple.io.emit('console', m, args.map(function (d) {
      return d;
    }));
    sup.apply && sup.apply(con, arguments);
  };
});

// stream results back
var update = (0, _debounce2.default)(500)(function () {
  var stats = { running: running, tests: tests, passes: passes, failures: failures },
      suites = [{ name: name, failures: failures, total: tests }];

  output.innerHTML = html;
  ripple('results', { stats: stats, suites: suites, html: html });
})

// listen on log
;(window.console = window.console || {}).log = function () {
  var line = _to2.default.arr(arguments).join(' ');
  html += (0, _escape2.default)(line) + '\n';

  if (-1 === includes('# tests')(line)) running = false;
  if (-1 === includes('ok ')(line)) {
    passes++;tests++;
  }
  if (-1 === includes('not ok ')(line)) {
    failures++;tests++;
  }

  if (line.match(/^(?!.*\[ri\/)/)) update();
  log.apply(console, arguments);
};

function reload() {
  location.reload();
}
},{"rijs.core":3,"rijs.data":5,"rijs.sync":25,"utilise/debounce":57,"utilise/escape":61,"utilise/noop":71,"utilise/raw":74,"utilise/to":76}],2:[function(require,module,exports){

},{}],3:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = core;

var _emitterify = require('utilise/emitterify');

var _emitterify2 = _interopRequireDefault(_emitterify);

var _colorfill = require('utilise/colorfill');

var _colorfill2 = _interopRequireDefault(_colorfill);

var _identity = require('utilise/identity');

var _identity2 = _interopRequireDefault(_identity);

var _header = require('utilise/header');

var _header2 = _interopRequireDefault(_header);

var _values = require('utilise/values');

var _values2 = _interopRequireDefault(_values);

var _key = require('utilise/key');

var _key2 = _interopRequireDefault(_key);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

var _to = require('utilise/to');

var _to2 = _interopRequireDefault(_to);

var _za = require('utilise/za');

var _za2 = _interopRequireDefault(_za);

var _text = require('./types/text');

var _text2 = _interopRequireDefault(_text);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------
// API: Gets or sets a resource
// -------------------------------------------
// ripple('name')     - returns the resource body if it exists
// ripple('name')     - creates & returns resource if it doesn't exist
// ripple('name', {}) - creates & returns resource, with specified name and body
// ripple({ ... })    - creates & returns resource, with specified name, body and headers
// ripple.resources   - returns raw resources
// ripple.resource    - alias for ripple, returns ripple instead of resource for method chaining
// ripple.register    - alias for ripple
// ripple.on          - event listener for changes - all resources
// ripple('name').on  - event listener for changes - resource-specific

function core() {
  log('creating');

  var resources = {};
  ripple.resources = resources;
  ripple.resource = chainable(ripple);
  ripple.register = ripple;
  ripple.types = types();
  return (0, _emitterify2.default)(ripple);

  function ripple(name, body, headers) {
    return !name ? ripple : _is2.default.arr(name) ? name.map(ripple) : _is2.default.promise(name) ? name.then(ripple).catch(err) : _is2.default.obj(name) && !name.name ? ripple((0, _values2.default)(name)) : _is2.default.fn(name) && name.resources ? ripple((0, _values2.default)(name.resources)) : _is2.default.str(name) && !body && resources[name] ? resources[name].body : _is2.default.str(name) && !body && !resources[name] ? register(ripple)({ name: name }) : _is2.default.str(name) && body ? register(ripple)({ name: name, body: body, headers: headers }) : _is2.default.obj(name) && !_is2.default.arr(name) ? register(ripple)(name) : (err('could not find or create resource', name), false);
  }
}

var register = function register(ripple) {
  return function (_ref) {
    var name = _ref.name;
    var body = _ref.body;
    var _ref$headers = _ref.headers;
    var headers = _ref$headers === undefined ? {} : _ref$headers;

    log('registering', name);
    if (_is2.default.promise(body)) return body.then(function (body) {
      return register(ripple)({ name: name, body: body, headers: headers });
    }).catch(err);
    var res = normalise(ripple)({ name: name, body: body, headers: headers });

    if (!res) return err('failed to register', name), false;
    ripple.resources[name] = res;
    ripple.emit('change', [name, {
      type: 'update',
      value: res.body,
      time: now(res)
    }]);
    return ripple.resources[name].body;
  };
};

var normalise = function normalise(ripple) {
  return function (res) {
    if (!(0, _header2.default)('content-type')(res)) (0, _values2.default)(ripple.types).sort((0, _za2.default)('priority')).some(contentType(res));
    if (!(0, _header2.default)('content-type')(res)) return err('could not understand resource', res), false;
    return parse(ripple)(res);
  };
};

var parse = function parse(ripple) {
  return function (res) {
    var type = (0, _header2.default)('content-type')(res);
    if (!ripple.types[type]) return err('could not understand type', type), false;
    return (ripple.types[type].parse || _identity2.default)(res);
  };
};

var contentType = function contentType(res) {
  return function (type) {
    return type.check(res) && (res.headers['content-type'] = type.header);
  };
};

var types = function types() {
  return [_text2.default].reduce(_to2.default.obj('header'), 1);
};

var chainable = function chainable(fn) {
  return function () {
    return fn.apply(this, arguments), fn;
  };
};

var err = require('utilise/err')('[ri/core]'),
    log = require('utilise/log')('[ri/core]'),
    now = function now(d, t) {
  return t = (0, _key2.default)('body.log.length')(d), _is2.default.num(t) ? t - 1 : t;
};
},{"./types/text":4,"utilise/colorfill":55,"utilise/emitterify":59,"utilise/err":60,"utilise/header":64,"utilise/identity":65,"utilise/is":67,"utilise/key":68,"utilise/log":70,"utilise/to":76,"utilise/values":77,"utilise/za":79}],4:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _includes = require('utilise/includes');

var _includes2 = _interopRequireDefault(_includes);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = {
  header: 'text/plain',
  check: function check(res) {
    return !(0, _includes2.default)('.html')(res.name) && !(0, _includes2.default)('.css')(res.name) && _is2.default.str(res.body);
  }
};
},{"utilise/includes":66,"utilise/is":67}],5:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = data;

var _overwrite = require('utilise/overwrite');

var _overwrite2 = _interopRequireDefault(_overwrite);

var _header = require('utilise/header');

var _header2 = _interopRequireDefault(_header);

var _extend = require('utilise/extend');

var _extend2 = _interopRequireDefault(_extend);

var _not = require('utilise/not');

var _not2 = _interopRequireDefault(_not);

var _key = require('utilise/key');

var _key2 = _interopRequireDefault(_key);

var _set = require('utilise/set');

var _set2 = _interopRequireDefault(_set);

var _fn = require('utilise/fn');

var _fn2 = _interopRequireDefault(_fn);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------
// Adds support for data resources
// -------------------------------------------
function data(ripple) {
  log('creating');
  ripple.on('change.data', trickle(ripple));
  ripple.types['application/data'] = {
    header: 'application/data',
    check: function check(res) {
      return _is2.default.obj(res.body) ? true : false;
    },
    to: function to(res) {
      return _is2.default.fn(res.value) && (res.value = str(res.value)), res;
    },
    parse: function parse(res) {
      if (_is2.default.str(res.body)) res.body = (0, _fn2.default)(res.body);
      var existing = ripple.resources[res.name] || {};

      (0, _extend2.default)(res.headers)(existing.headers);
      res.body = (0, _set2.default)()(res.body || [], existing.body && existing.body.log, _is2.default.num(res.headers.log) ? res.headers.log : -1);
      (0, _overwrite2.default)(res.body.on)(listeners(existing));
      res.body.on('change.bubble', function (change) {
        ripple.emit('change', ripple.change = [res.name, change], (0, _not2.default)(_is2.default.in(['data'])));
        delete ripple.change;
      });

      return res;
    }
  };

  return ripple;
}

var trickle = function trickle(ripple) {
  return function (name, change) {
    return (0, _header2.default)('content-type', 'application/data')(ripple.resources[name]) && ripple.resources[name].body.emit('change', [change || null], (0, _not2.default)(_is2.default.in(['bubble'])));
  };
};

var log = require('utilise/log')('[ri/types/data]'),
    listeners = (0, _key2.default)('body.on');
},{"utilise/extend":10,"utilise/fn":11,"utilise/header":13,"utilise/is":14,"utilise/key":15,"utilise/log":17,"utilise/not":18,"utilise/overwrite":19,"utilise/set":22}],6:[function(require,module,exports){
module.exports = typeof window != 'undefined'
},{}],7:[function(require,module,exports){
module.exports = function copy(from, to){ 
  return function(d){ 
    return to[d] = from[d], d
  }
}
},{}],8:[function(require,module,exports){
var has = require('./has')

module.exports = function def(o, p, v, w){
  if (o.host && o.host.nodeName) o = o.host
  if (p.name) v = p, p = p.name
  !has(o, p) && Object.defineProperty(o, p, { value: v, writable: w })
  return o[p]
}

},{"./has":12}],9:[function(require,module,exports){
var promise = require('./promise')
  , def     = require('./def')
  
module.exports = function emitterify(body) {
  body = body || {}
  def(body, 'emit', emit, 1)
  def(body, 'once', once, 1)
  def(body, 'off', off, 1)
  def(body, 'on', on, 1)
  body.on['*'] = []
  return body

  function emit(type, pm, filter) {
    var li = body.on[type.split('.')[0]] || []
    
    for (var i = 0; i < li.length; i++)
      if (!li[i].ns || !filter || filter(li[i].ns))
        call(li[i].once ? li.splice(i--, 1)[0] : li[i], pm)

    for (var i = 0; i < body.on['*'].length; i++)
      call(body.on['*'][i], [type, pm])

    return body
  }


  function call(cb, pm){
      cb.next             ? cb.next(pm) 
    : pm instanceof Array ? cb.apply(body, pm) 
                          : cb.call(body, pm) 
  }

  function on(type, cb, once) {
    var id = type.split('.')[0]
      , ns = type.split('.')[1]
      , li = body.on[id] = body.on[id] || []
      
    return !cb &&  ns ? (cb = body.on[id]['$'+ns]) ? cb : push(observable())
         : !cb && !ns ? push(observable())
         :  cb &&  ns ? push((remove(li, body.on[id]['$'+ns] || -1), cb))
         :  cb && !ns ? push(cb)
                      : false

    function push(cb){
      cb.once = once
      if (ns) body.on[id]['$'+(cb.ns = ns)] = cb
      li.push(cb)
      return cb.next ? cb : body
    }
  }

  function once(type, callback){
    return body.on(type, callback, true)
  }

  function remove(li, cb) {
    var i = li.length
    while (~--i) 
      if (cb == li[i] || cb == li[i].fn || !cb)
        li.splice(i, 1)
  }

  function off(type, cb) {
    remove((body.on[type] || []), cb)
    if (cb && cb.ns) delete li['$'+cb.ns]
  }

  function observable(parent, fn) {
    var o = promise()
    o.listeners = []
    o.parent = parent
    o.fn = fn
    o.i = 0

    o.map = function(fn) {
      var n = observable(o, fn)
      o.listeners[o.listeners.push(function(d, i){ n.next(fn(d, i, n)) }) - 1].fn = fn
      return n
    }

    o.filter = function(fn) {
      var n = observable(o, fn)
      o.listeners[o.listeners.push(function(d, i){ fn(d, i, n) && n.next(d) }) - 1].fn = fn
      return n
    }

    o.reduce = function(fn, seed) {
      var n = observable(o, fn)
      o.listeners[o.listeners.push(function(d, i){ n.next(seed = fn(seed, d, i, n)) }) - 1].fn = fn
      return n
    }

    o.next = function(d) {
      o.resolve(d)
      o.listeners.map(function(fn){ fn(d, o.i) })
      o.i++
      return o
    }

    o.off = function(fn){
      return remove(o.listeners, fn), o
    }

    o.unsubscribe = function(){
      return o.parent.off(o.fn), o.parent = null, o
    }

    return o

  }
}
},{"./def":8,"./promise":21}],10:[function(require,module,exports){
var is = require('./is')
  , not = require('./not')
  , keys = require('./keys')
  , copy = require('./copy')

module.exports = function extend(to){ 
  return function(from){
    keys(from)
      .filter(not(is.in(to)))
      .map(copy(from, to))

    return to
  }
}
},{"./copy":7,"./is":14,"./keys":16,"./not":18}],11:[function(require,module,exports){
var is = require('./is')

module.exports = function fn(candid){
  return is.fn(candid) ? candid
       : (new Function("return " + candid))()
}
},{"./is":14}],12:[function(require,module,exports){
module.exports = function has(o, k) {
  return k in o
}
},{}],13:[function(require,module,exports){
var key = require('./key')

module.exports = function header(header, value) {
  var getter = arguments.length == 1
  return function(d){ 
    return !d || !d.headers ? null
         : getter ? key(header)(d.headers)
                  : key(header)(d.headers) == value
  }
}
},{"./key":15}],14:[function(require,module,exports){
module.exports = is
is.fn      = isFunction
is.str     = isString
is.num     = isNumber
is.obj     = isObject
is.lit     = isLiteral
is.bol     = isBoolean
is.truthy  = isTruthy
is.falsy   = isFalsy
is.arr     = isArray
is.null    = isNull
is.def     = isDef
is.in      = isIn
is.promise = isPromise

function is(v){
  return function(d){
    return d == v
  }
}

function isFunction(d) {
  return typeof d == 'function'
}

function isBoolean(d) {
  return typeof d == 'boolean'
}

function isString(d) {
  return typeof d == 'string'
}

function isNumber(d) {
  return typeof d == 'number'
}

function isObject(d) {
  return typeof d == 'object'
}

function isLiteral(d) {
  return typeof d == 'object' 
      && !(d instanceof Array)
}

function isTruthy(d) {
  return !!d == true
}

function isFalsy(d) {
  return !!d == false
}

function isArray(d) {
  return d instanceof Array
}

function isNull(d) {
  return d === null
}

function isDef(d) {
  return typeof d !== 'undefined'
}

function isPromise(d) {
  return d instanceof Promise
}

function isIn(set) {
  return function(d){
    return !set ? false  
         : set.indexOf ? ~set.indexOf(d)
         : d in set
  }
}
},{}],15:[function(require,module,exports){
var str = require('./str')
  , is = require('./is')

module.exports = function key(k, v){ 
  var set = arguments.length > 1
    , keys = is.fn(k) ? [] : str(k).split('.')
    , root = keys.shift()

  return function deep(o, i){
    var masked = {}
    
    return !o ? undefined 
         : !is.num(k) && !k ? o
         : is.arr(k) ? (k.map(copy), masked)
         : o[k] || !keys.length ? (set ? ((o[k] = is.fn(v) ? v(o[k], i) : v), o)
                                       :  (is.fn(k) ? k(o) : o[k]))
                                : (set ? (key(keys.join('.'), v)(o[root] ? o[root] : (o[root] = {})), o)
                                       :  key(keys.join('.'))(o[root]))

    function copy(k){
      var val = key(k)(o)
      ;(val != undefined) && key(k, val)(masked)
    }
  }
}
},{"./is":14,"./str":23}],16:[function(require,module,exports){
var is = require('./is')

module.exports = function keys(o) { 
  return Object.keys(is.obj(o) || is.fn(o) ? o : {})
}
},{"./is":14}],17:[function(require,module,exports){
var is = require('./is')
  , to = require('./to')
  , owner = require('./owner')

module.exports = function log(ns){
  return function(d){
    if (!owner.console || !console.log.apply) return d;
    is.arr(arguments[2]) && (arguments[2] = arguments[2].length)
    var args = to.arr(arguments)
      , prefix = '[log][' + (new Date()).toISOString() + ']' + ns

    args.unshift(prefix.grey ? prefix.grey : prefix)
    return console.log.apply(console, args), d
  }
}
},{"./is":14,"./owner":20,"./to":24}],18:[function(require,module,exports){
module.exports = function not(fn){
  return function(){
    return !fn.apply(this, arguments)
  }
}
},{}],19:[function(require,module,exports){
var is = require('./is')
  , keys = require('./keys')
  , copy = require('./copy')

module.exports = function overwrite(to){ 
  return function(from){
    keys(from)
      .map(copy(from, to))
        
    return to
  }
}
},{"./copy":7,"./is":14,"./keys":16}],20:[function(require,module,exports){
(function (global){
var client = require('./client')
module.exports = client ? /* istanbul ignore next */ window : global
}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"./client":6}],21:[function(require,module,exports){
module.exports = promise

function promise() {
  var resolve
    , reject
    , p = new Promise(function(res, rej){ 
        resolve = res, reject = rej
      })

  arguments.length && resolve(arguments[0])
  p.resolve = resolve
  p.reject  = reject
  return p
}
},{}],22:[function(require,module,exports){
var act = { add: add, update: update, remove: remove }
  , emitterify = require('./emitterify')
  , def = require('./def')
  , is  = require('./is')
  , str = JSON.stringify
  , parse = JSON.parse

module.exports = function set(d, skipEmit) {
  return function(o, existing, max) {
    if (!is.obj(o) && !is.fn(o))
      return o

    if (!is.obj(d)) { 
      var log = existing || o.log || []
        , root = o

      if (!is.def(max)) max = log.max || 0
      if (!max)    log = []
      if (max < 0) log = log.concat(null)
      if (max > 0) {
        var s = str(o)
        root = parse(s) 
        log = log.concat({ type: 'update', value: parse(s), time: log.length })
      } 

      def(log, 'max', max)
      
      root.log 
        ? (root.log = log)
        : def(emitterify(root, null), 'log', log, 1)

      return root
    }

    if (is.def(d.key)) {
      if (!apply(o, d.type, (d.key = '' + d.key).split('.'), d.value))
        return false
    } else
      return false

    if (o.log && o.log.max) 
      o.log.push((d.time = o.log.length, o.log.max > 0 ? d : null))

    if (!skipEmit && o.emit)
      o.emit('change', d)

    return o
  }
}

function apply(body, type, path, value) {
  var next = path.shift()

  if (!act[type]) 
    return false
  if (path.length) { 
    if (!(next in body)) 
      if (type == 'remove') return true
      else body[next] = {}
    return apply(body[next], type, path, value)
  }
  else {
    act[type](body, next, value)
    return true
  }
}

function add(o, k, v) {
  is.arr(o) 
    ? o.splice(k, 0, v) 
    : (o[k] = v)
}

function update(o, k, v) { 
  o[k] = v 
}

function remove(o, k, v) { 
  is.arr(o) 
    ? o.splice(k, 1)
    : delete o[k]
}
},{"./def":8,"./emitterify":9,"./is":14}],23:[function(require,module,exports){
var is = require('./is') 

module.exports = function str(d){
  return d === 0 ? '0'
       : !d ? ''
       : is.fn(d) ? '' + d
       : is.obj(d) ? JSON.stringify(d)
       : String(d)
}
},{"./is":14}],24:[function(require,module,exports){
var is = require('./is')

module.exports = { 
  arr: toArray
, obj: toObject
}

function toArray(d){
  return Array.prototype.slice.call(d, 0)
}

function toObject(d) {
  var by = 'id'
    , o = {}

  return arguments.length == 1 
    ? (by = d, reduce)
    : reduce.apply(this, arguments)

  function reduce(p,v,i){
    if (i === 0) p = {}
    p[is.fn(by) ? by(v, i) : v[by]] = v
    return p
  }
}
},{"./is":14}],25:[function(require,module,exports){
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = sync;

var _express = require('express');

var _express2 = _interopRequireDefault(_express);

var _identity = require('utilise/identity');

var _identity2 = _interopRequireDefault(_identity);

var _promise = require('utilise/promise');

var _promise2 = _interopRequireDefault(_promise);

var _values = require('utilise/values');

var _values2 = _interopRequireDefault(_values);

var _extend = require('utilise/extend');

var _extend2 = _interopRequireDefault(_extend);

var _header = require('utilise/header');

var _header2 = _interopRequireDefault(_header);

var _client = require('utilise/client');

/* istanbul ignore next */
var _client2 = _interopRequireDefault(_client);

var _clone = require('utilise/clone');

var _clone2 = _interopRequireDefault(_clone);

var _noop = require('utilise/noop');

/* istanbul ignore next */
var _noop2 = _interopRequireDefault(_noop);

var _keys = require('utilise/keys');

var _keys2 = _interopRequireDefault(_keys);

var _not = require('utilise/not');

var _not2 = _interopRequireDefault(_not);

var _str = require('utilise/str');

var _str2 = _interopRequireDefault(_str);

var _set = require('utilise/set');

var _set2 = _interopRequireDefault(_set);

var _def = require('utilise/def');

var _def2 = _interopRequireDefault(_def);

var _key = require('utilise/key');

var _key2 = _interopRequireDefault(_key);

var _by = require('utilise/by');

var _by2 = _interopRequireDefault(_by);

var _is = require('utilise/is');

var _is2 = _interopRequireDefault(_is);

var _to = require('utilise/to');

/* istanbul ignore next */
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// -------------------------------------------
// Synchronises resources between server/client
// -------------------------------------------
function sync(ripple) {
  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},
      server = _ref.server,
      port = _ref.port;

  log('creating');
/* istanbul ignore next */
  if (!_client2.default) {
    // ripple.to = clean(ripple.to)
    (0, _values2.default)(ripple.types).map(function (type) {
      return type.parse = headers(ripple)(type.parse);
    });
    server = (0, _def2.default)(ripple, 'server', server || (0, _express2.default)().listen(port, function (d) {
      return log('listening', server.address().port);
    }));
    server.express = (0, _key2.default)('_events.request')(server) || server.on('request', (0, _express2.default)())._events.request;
  }

  (0, _def2.default)(ripple, 'io', io(server));
  ripple.io.use(ip);
  ripple.req = send(ripple)(ripple);
/* istanbul ignore next */
  ripple.send = _client2.default ? send(ripple)(ripple.io) : send(ripple);
  ripple.on('change.send', broadcast(ripple));
  ripple.io.on('change', consume(ripple));
  ripple.io.on('connection', connected(ripple));
  return ripple;
}

var connected = function connected(ripple) {
  return function (socket) {
    log('connected'.green, (0, _str2.default)(socket.ip).grey);
    socket.on('change', consume(ripple));
    ripple.send(socket)();
  };
};

var broadcast = function broadcast(ripple) {
  return function (name, change) {
/* istanbul ignore next */
    (_client2.default ? ripple.send : ripple.send())((0, _extend2.default)({ name: name, key: change.key, type: change.type, value: change.value })(change || {}));
  };
};

var normalize = function normalize(ripple) {
  var next = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _identity2.default;
  return function (name, type, value) {

    var req = _is2.default.obj(name) ? name : { name: name, type: type, value: value },
        resource = ripple.resources[req.name];

    if (!req.name) return next((0, _values2.default)(ripple.resources).map(normalize(ripple)));

    // if (!resource)
    //   return Promise.resolve([404, err(`cannot find ${req.name}`)])
    if (!req.type) req = {
      name: req.name,
      type: 'update',
      headers: resource.headers,
      value: resource.body,
      time: now(resource)
    };

    if (req.type == 'update' && !req.key) req.headers = resource.headers;

    return next(req);
  };
};

// send all or some req, to all or some sockets
var send = function send(ripple) {
  var l = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : log;
  return function (who) {
    return normalize(ripple, function (req) {
      var count = function count(sent) {
        return (0, _str2.default)(sent.length).green.bold + '/' + (0, _str2.default)(everyone.length).green;
      },
          all = function all(d) {
        return req.length && log('send'.grey, count(sockets), 'all'.bold, ('(' + req.length + ')').grey);
      },
/* istanbul ignore next */
          everyone = _client2.default ? [ripple.io] : (0, _values2.default)(ripple.io.of('/').sockets),
          sockets = _is2.default.arr(who) ? who : _is2.default.str(who) ? everyone.filter((0, _by2.default)('sessionID', who)) : !who ? everyone : [who],
/* istanbul ignore next */
          promises = _is2.default.arr(req) ? (all(), req.map(send(ripple, l = _noop2.default)(sockets))) : sockets.map(function (s) {
        return to(ripple, req, s);
      }).filter(Boolean);

      if (promises.length) l('send'.grey, count(promises), req.name);
      return Promise.all(promises);
    });
  };
};

// outgoing transforms
var to = function to(ripple, req, socket, resource) {
  if ((0, _header2.default)('silent', socket)(resource = ripple.resources[req.name])) return delete resource.headers.silent, false;

  var nametype = '(' + req.name + ', ' + req.type + ')',
      xres = (0, _header2.default)('to')(resource) || _identity2.default,
      xtyp = type(ripple)(resource).to || _identity2.default,
      xall = ripple.to || _identity2.default,
      p = (0, _promise2.default)();

  Promise.resolve(clean((0, _extend2.default)({ socket: socket })(req))).then(function (req) {
    return req && xres(req, socket);
  }).then(function (req) {
    return req && xtyp(req, socket);
  }).then(function (req) {
    return req && xall(req, socket);
  }).then(function (req) {
    !req ? p.resolve([false]) : socket == ripple ? consume(ripple)(req, res) : socket.emit('change', strip(req), res);
  }).catch(function (e) {
    throw new Error(err('to failed'.red, e));
  });

  return p;

  function res() {
    deb('ack'.grey, nametype, (0, _str2.default)(socket.ip).grey);
    p.resolve((0, _to.arr)(arguments));
  }
};

// incoming transforms
var consume = function consume(ripple) {
  return function (req) {
/* istanbul ignore next */
    var res = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _noop2.default;

    var nametype = '(' + req.name + ', ' + req.type + ')',
        resource = ripple.resources[req.name],
        silent = silence(req.socket = this),
        xres = (0, _header2.default)('from')(resource) || _identity2.default,
        xtyp = type(ripple)(resource).from || _identity2.default,
        xall = ripple.from || _identity2.default;

    var finish = function finish(req) {
      return !req ? deb('skip', 'async', nametype) : !req.key && req.type == 'update' ? (ripple(silent(body(req))), res(200, deb('ok ' + nametype))) : isStandardVerb(req.type) ? ((0, _set2.default)(req)(silent(resource).body), res(200, deb('ok ' + nametype, _key2.default.grey))) : !isStandardVerb(req.type) ? res(405, deb('method not allowed', nametype)) : res(400, deb('cannot process', nametype));
    };

    log('recv'.grey, nametype);
    try {
      return !req.name ? res(404, err('not found'.red, req.name)) : !(req = xall(req, res)) ? deb('skip', 'global', nametype) : !(req = xtyp(req, res)) ? deb('skip', 'type', nametype) : !(req = xres(req, res)) ? deb('skip', 'resource', nametype) : _is2.default.promise(req) ? req.then(finish) : finish(req);
    } catch (e) {
      res(e.status || 500, err(e.message, nametype, '\n', e.stack));
    }
  };
};

var body = function body(_ref2) {
  var name = _ref2.name,
      body = _ref2.body,
      value = _ref2.value,
      headers = _ref2.headers;
  return { name: name, headers: headers, body: value };
};

var headers = function headers(ripple) {
  return function (next) {
    return function (res) {
      var existing = ripple.resources[res.name],
          from = (0, _header2.default)('from')(res) || (0, _header2.default)('from')(existing),
          to = (0, _header2.default)('to')(res) || (0, _header2.default)('to')(existing);
      if (from) res.headers.from = from;
      if (to) res.headers.to = to;
      return next ? next(res) : res;
    };
  };
};

var io = function io(server) {
/* istanbul ignore next */
  var transports = _client2.default && document.currentScript && document.currentScript.getAttribute('transports') && document.currentScript.getAttribute('transports').split(',') || undefined;

/* istanbul ignore next */
  var r = !_client2.default ? require('socket.io')(server) : window.io ? window.io({ transports: transports }) : _is2.default.fn(require('socket.io-client')) ? require('socket.io-client')({ transports: transports }) : { on: _noop2.default, emit: _noop2.default };
/* istanbul ignore next */
  r.use = r.use || _noop2.default;
  return r;
};

var ip = function ip(socket, next) {
  socket.ip = socket.request.headers['x-forwarded-for'] || socket.request.connection.remoteAddress;
  next();
};

var strip = (0, _key2.default)(['name', 'key', 'type', 'value', 'headers', 'time']);

var clean = function clean(req) {
  if (_is2.default.obj(req.value)) try {
    req.value = (0, _clone2.default)(req.value);
  } catch (e) {
    err('cannot send circular structure', e, req.value);
    return false;
  }

  if (!req.headers || !req.headers.silent) return req;

  var stripped = {};

  (0, _keys2.default)(req.headers).filter((0, _not2.default)((0, _is2.default)('silent'))).map(function (header) {
    return stripped[header] = req.headers[header];
  });

  req.headers = stripped;
  return req;
};

var type = function type(ripple) {
  return function (res) {
    return ripple.types[(0, _header2.default)('content-type')(res)] || {};
  };
},
    now = function now(d, t) {
  return t = (0, _key2.default)('body.log.length')(d), _is2.default.num(t) ? t - 1 : t;
},
    silence = function silence(socket) {
  return function (res) {
    return (0, _key2.default)('headers.silent', socket)(res);
  };
},
    isStandardVerb = _is2.default.in(['update', 'add', 'remove']),
    log = require('utilise/log')('[ri/sync]'),
    err = require('utilise/err')('[ri/sync]'),
    deb = require('utilise/deb')('[ri/sync]');
},{"express":2,"socket.io":2,"socket.io-client":2,"utilise/by":26,"utilise/client":27,"utilise/clone":28,"utilise/deb":31,"utilise/def":32,"utilise/err":34,"utilise/extend":35,"utilise/header":38,"utilise/identity":39,"utilise/is":40,"utilise/key":41,"utilise/keys":42,"utilise/log":43,"utilise/noop":44,"utilise/not":45,"utilise/promise":48,"utilise/set":49,"utilise/str":51,"utilise/to":52,"utilise/values":53}],26:[function(require,module,exports){
var key = require('./key')
  , is  = require('./is')

module.exports = function by(k, v){
  var exists = arguments.length == 1
  return function(o){
    var d = is.fn(k) ? k(o) : key(k)(o)
    
    return d && v && d.toLowerCase && v.toLowerCase ? d.toLowerCase() === v.toLowerCase()
         : exists ? Boolean(d)
         : is.fn(v) ? v(d)
         : d == v
  }
}
},{"./is":40,"./key":41}],27:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],28:[function(require,module,exports){
var parse = require('./parse')
  , str = require('./str')
  , is = require('./is')

module.exports = function clone(d) {
  return !is.fn(d) && !is.str(d)
       ? parse(str(d))
       : d
}

},{"./is":40,"./parse":47,"./str":51}],29:[function(require,module,exports){
arguments[4][7][0].apply(exports,arguments)
},{"dup":7}],30:[function(require,module,exports){
module.exports = function datum(node){
  return node.__data__
}
},{}],31:[function(require,module,exports){
var is = require('./is')
  , to = require('./to')
  , key = require('./key')
  , owner = require('./owner')
  , split = require('./split')
  , client = require('./client')
  , identity = require('./identity')
  , DEBUG = strip((client ? (owner.location.search.match(/debug=(.*?)(&|$)/) || [])[1] : key('process.env.DEBUG')(owner)) || '')
  , whitelist = DEBUG.split(',').map(split('/'))

module.exports = function deb(ns){
  return DEBUG == '*' || whitelist.some(matches(ns)) ? out : identity

  function out(d){
    if (!owner.console || !console.log.apply) return d;
    is.arr(arguments[2]) && (arguments[2] = arguments[2].length)
    var args = to.arr(arguments)
      , prefix = '[deb][' + (new Date()).toISOString() + ']' + ns

    args.unshift(prefix.grey ? prefix.grey : prefix)
    return console.log.apply(console, args), d
  }
}

function matches(ns) {
  ns = strip(ns).split('/')
  return function(arr){
    return arr.length == 1 ? arr[0] == ns[0]
         : arr.length == 2 ? arr[0] == ns[0] && arr[1] == ns[1]
                           : false 
  }
}

function strip(str) {
  return str.replace(/(\[|\])/g, '')
}
},{"./client":27,"./identity":39,"./is":40,"./key":41,"./owner":46,"./split":50,"./to":52}],32:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"./has":37,"dup":8}],33:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"./def":32,"./promise":48,"dup":9}],34:[function(require,module,exports){
var is = require('./is')
  , to = require('./to')
  , owner = require('./owner')

module.exports = function err(ns){
  return function(d){
    if (!owner.console || !console.error.apply) return d;
    is.arr(arguments[2]) && (arguments[2] = arguments[2].length)
    var args = to.arr(arguments)
      , prefix = '[err][' + (new Date()).toISOString() + ']' + ns

    args.unshift(prefix.red ? prefix.red : prefix)
    return console.error.apply(console, args), d
  }
}
},{"./is":40,"./owner":46,"./to":52}],35:[function(require,module,exports){
arguments[4][10][0].apply(exports,arguments)
},{"./copy":29,"./is":40,"./keys":42,"./not":45,"dup":10}],36:[function(require,module,exports){
var datum = require('./datum')
  , key = require('./key')

module.exports = from
from.parent = fromParent

function from(o){
  return function(k){
    return key(k)(o)
  }
}

function fromParent(k){
  return datum(this.parentNode)[k]
}
},{"./datum":30,"./key":41}],37:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"dup":12}],38:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"./key":41,"dup":13}],39:[function(require,module,exports){
module.exports = function identity(d) {
  return d
}
},{}],40:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"dup":14}],41:[function(require,module,exports){
arguments[4][15][0].apply(exports,arguments)
},{"./is":40,"./str":51,"dup":15}],42:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"./is":40,"dup":16}],43:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"./is":40,"./owner":46,"./to":52,"dup":17}],44:[function(require,module,exports){
module.exports = function noop(){}
},{}],45:[function(require,module,exports){
arguments[4][18][0].apply(exports,arguments)
},{"dup":18}],46:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"./client":27,"dup":20}],47:[function(require,module,exports){
module.exports = function parse(d){
  return d && JSON.parse(d)
}
},{}],48:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"dup":21}],49:[function(require,module,exports){
arguments[4][22][0].apply(exports,arguments)
},{"./def":32,"./emitterify":33,"./is":40,"dup":22}],50:[function(require,module,exports){
module.exports = function split(delimiter){
  return function(d){
    return d.split(delimiter)
  }
}

},{}],51:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"./is":40,"dup":23}],52:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./is":40,"dup":24}],53:[function(require,module,exports){
var keys = require('./keys')
  , from = require('./from')

module.exports = function values(o) {
  return !o ? [] : keys(o).map(from(o))
}
},{"./from":36,"./keys":42}],54:[function(require,module,exports){
arguments[4][6][0].apply(exports,arguments)
},{"dup":6}],55:[function(require,module,exports){
var client = require('./client')
  , colors = !client && require('colors')
  , has = require('./has')
  , is = require('./is')

module.exports = colorfill()

function colorfill(){
  /* istanbul ignore next */
  ['red', 'green', 'bold', 'grey', 'strip'].forEach(function(color) {
    !is.str(String.prototype[color]) && Object.defineProperty(String.prototype, color, {
      get: function() {
        return String(this)
      } 
    })
  })
}


},{"./client":54,"./has":63,"./is":67,"colors":2}],56:[function(require,module,exports){
arguments[4][30][0].apply(exports,arguments)
},{"dup":30}],57:[function(require,module,exports){
var is = require('./is')

module.exports = function debounce(d){
  var pending, wait = is.num(d) ? d : 100

  return is.fn(d) 
       ? next(d)
       : next

  function next(fn){
    return function(){
      var ctx = this, args = arguments
      pending && clearTimeout(pending)
      pending = setTimeout(function(){ fn.apply(ctx, args) }, wait)
    }
  }
  
}
},{"./is":67}],58:[function(require,module,exports){
arguments[4][8][0].apply(exports,arguments)
},{"./has":63,"dup":8}],59:[function(require,module,exports){
arguments[4][9][0].apply(exports,arguments)
},{"./def":58,"./promise":73,"dup":9}],60:[function(require,module,exports){
arguments[4][34][0].apply(exports,arguments)
},{"./is":67,"./owner":72,"./to":76,"dup":34}],61:[function(require,module,exports){
module.exports = function escape(str) {
  return str.replace(/[&<>'"]/g, function(char){
    return safe[char]
  })
}

var safe = { 
  "&": "&amp;"
, "<": "&lt;"
, ">": "&gt;"
, '"': "&quot;"
, "'": "&#39;"
}

},{}],62:[function(require,module,exports){
arguments[4][36][0].apply(exports,arguments)
},{"./datum":56,"./key":68,"dup":36}],63:[function(require,module,exports){
arguments[4][12][0].apply(exports,arguments)
},{"dup":12}],64:[function(require,module,exports){
arguments[4][13][0].apply(exports,arguments)
},{"./key":68,"dup":13}],65:[function(require,module,exports){
arguments[4][39][0].apply(exports,arguments)
},{"dup":39}],66:[function(require,module,exports){
module.exports = function includes(pattern){
  return function(d){
    return d && d.indexOf && ~d.indexOf(pattern)
  }
}
},{}],67:[function(require,module,exports){
arguments[4][14][0].apply(exports,arguments)
},{"dup":14}],68:[function(require,module,exports){
var wrap = require('./wrap')
  , str = require('./str')
  , is = require('./is')

module.exports = function key(k, v){ 
  var set = arguments.length > 1
    , keys = is.fn(k) ? [] : str(k).split('.')
    , root = keys.shift()

  return function deep(o, i){
    var masked = {}
    
    return !o ? undefined 
         : !is.num(k) && !k ? o
         : is.arr(k) ? (k.map(copy), masked)
         : o[k] || !keys.length ? (set ? ((o[k] = is.fn(v) ? v(o[k], i) : v), o)
                                       :  (is.fn(k) ? k(o) : o[k]))
                                : (set ? (key(keys.join('.'), v)(o[root] ? o[root] : (o[root] = {})), o)
                                       :  key(keys.join('.'))(o[root]))

    function copy(k){
      var val = key(k)(o)
      if (val != undefined) 
        key(k, is.fn(val) ? wrap(val) : val)(masked)
    }
  }
}
},{"./is":67,"./str":75,"./wrap":78}],69:[function(require,module,exports){
arguments[4][16][0].apply(exports,arguments)
},{"./is":67,"dup":16}],70:[function(require,module,exports){
arguments[4][17][0].apply(exports,arguments)
},{"./is":67,"./owner":72,"./to":76,"dup":17}],71:[function(require,module,exports){
arguments[4][44][0].apply(exports,arguments)
},{"dup":44}],72:[function(require,module,exports){
arguments[4][20][0].apply(exports,arguments)
},{"./client":54,"dup":20}],73:[function(require,module,exports){
arguments[4][21][0].apply(exports,arguments)
},{"dup":21}],74:[function(require,module,exports){
module.exports = function raw(selector, doc){
  var prefix = !doc && document.head.createShadowRoot ? 'html /deep/ ' : ''
  return (doc ? doc : document).querySelector(prefix+selector)
}
},{}],75:[function(require,module,exports){
arguments[4][23][0].apply(exports,arguments)
},{"./is":67,"dup":23}],76:[function(require,module,exports){
arguments[4][24][0].apply(exports,arguments)
},{"./is":67,"dup":24}],77:[function(require,module,exports){
arguments[4][53][0].apply(exports,arguments)
},{"./from":62,"./keys":69,"dup":53}],78:[function(require,module,exports){
module.exports = function wrap(d){
  return function(){
    return d
  }
}
},{}],79:[function(require,module,exports){
var key = require('./key')

module.exports = function za(k) {
  return function(a, b){
    var ka = key(k)(a) || ''
      , kb = key(k)(b) || ''

    return ka > kb ? -1 
         : ka < kb ?  1 
                   :  0
  }
}

},{"./key":68}]},{},[1]);
